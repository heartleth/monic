#include <regex>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

enum type {
	rex, arg, strg, statc, val
};

int getfirst(string st) {
	int i = 0;
	for (char p : st) {
		if (p != '\t' && p != ' ') {
			return i;
		}
		i += 1;
	}
	return 0;
}

vector<string> split(string st, char spl) {
	vector<string> ret;
	ret.push_back("");
	for (auto c : st) {
		if (c == spl) {
			ret.push_back("");
		}
		else {
			ret.back().push_back(c);
		}
	}
	return ret;
}

int main(int argc, char** argv) {
	vector<string> stvec;
	fstream rf(argv[1]);
	//fstream rf("game.monic");
	FILE* wf;
	string fname(argv[1]);
	//string fname("game.monic");
	fname += ".cpp";
	wf = fopen(fname.c_str(), "w");

	string buff;
	while (getline(rf, buff)) {
		stvec.push_back(buff);
	}

	fprintf(wf, "#include <regex>\n");
	fprintf(wf, "#include <string>\n");
	fprintf(wf, "#include <string.h>\n");
	fprintf(wf, "//Code generated by monic\n");
	fprintf(wf, R"(
bool m_match(std::string a, std::string regex) {
	std::regex re(regex);
	return regex_match(a, re);
}
)");

	int i = 0;
	for (string st : stvec) {
		auto patt = split(st.substr(getfirst(st)), ' ');
		if (patt[0] != "@") {
			fprintf(wf, "%s\n", st.c_str());
		}
		else {
			if (patt[1] == "main") {
				fprintf(wf, "int main(int argc, char **argv) {");
			}
			if (patt[1] == "endmain") {
				fprintf(wf, "return 0;\n}");
			}
			if (patt[1] == "endarg") {
				fprintf(wf, "}\n}");
			}
			if (patt[1] == "~") {
				fprintf(wf, "if (argc >= %d) {\nif (true ", patt.size() - 2);
				queue<pair<string, int>> q;
				for (int j = 3; j < patt.size(); j++) {
					auto pattern = patt[j];
					string str;
					switch (pattern[0]) {
					case '*':
						break;
					case '[':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& !strcmp(argv[%d], \"%s\") ", j - 2, str.c_str());
						break;
					case '<':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& (!strcmp(argv[%d], \"--%s\") || !strcmp(argv[%d], \"-%c\")) ", j - 2, str.c_str(), j - 2, str[0]);
						break;
					case '/':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& m_match(argv[%d], \"%s\") ", j - 2, str.c_str());
						break;
					case '%':
						str = pattern.substr(1);
						str.pop_back();
						q.push(make_pair(str, j - 2));
						break;
					}
					cout << str << endl;
				}
				fprintf(wf, ") {\n");
				while (!q.empty()) {
					fprintf(wf, "string %s(argv[%d]);\n", q.front().first.c_str(), q.front().second);
					q.pop();
				}
			}
			if (patt[1] == "!") {
				fprintf(wf, "if (argc == %d) {\nif (true ", patt.size() - 2);
				queue<pair<string, int>> q;
				for (int j = 3; j < patt.size(); j++) {
					auto pattern = patt[j];
					string str;
					switch (pattern[0]) {
					case '*':
						break;
					case '[':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& !strcmp(argv[%d], \"%s\") ", j - 2, str.c_str());
						break;
					case '<':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& (!strcmp(argv[%d], \"--%s\") || !strcmp(argv[%d], \"-%c\")) ", j - 2, str.c_str(), j - 2, str[0]);
						break;
					case '/':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& m_match(argv[%d], \"%s\") ", j - 2, str.c_str());
						break;
					case '%':
						str = pattern.substr(1);
						str.pop_back();
						q.push(make_pair(str, j - 2));
						break;
					}
					cout << str << endl;
				}
				fprintf(wf, ") {\n");
				while (!q.empty()) {
					fprintf(wf, "std::string %s(argv[%d]);\n", q.front().first.c_str(), q.front().second);
					q.pop();
				}
			}

			if (patt[1] == "%") {
				fprintf(wf, "if (true) {\nif (true ", patt.size() - 2);
				queue<pair<string, int>> q;
				for (int j = 3; j < patt.size(); j++) {
					auto pattern = patt[j];
					string str;
					switch (pattern[0]) {
					case '*':
						break;
					case '[':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& !strcmp(argv[%d], \"%s\") ", j - 2, str.c_str());
						break;
					case '<':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& (!strcmp(argv[%d], \"--%s\") || !strcmp(argv[%d], \"-%c\")) ", j - 2, str.c_str(), j - 2, str[0]);
						break;
					case '/':
						str = pattern.substr(1);
						str.pop_back();
						fprintf(wf, "&& m_match(argv[%d], \"%s\") ", j - 2, str.c_str());
						break;
					case '%':
						str = pattern.substr(1);
						str.pop_back();
						q.push(make_pair(str, j - 2));
						break;
					}
					cout << str << endl;
				}
				fprintf(wf, ") {\n");
				while (!q.empty()) {
					fprintf(wf, "string %s(argv[%d]);\n", q.front().first.c_str(), q.front().second);
					q.pop();
				}
			}
		}
		i += 1;
	}
	fclose(wf);
	return 0;
}